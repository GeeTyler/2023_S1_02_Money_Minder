@layout MainLayout
@page "/stockmarket"
@using Microsoft.EntityFrameworkCore
@using MoneyMinder.Model
@using MoneyMinder.Data
@inject NavigationManager NavManager
@inject IDataAccessService DataAccessService
@inject StockDataScrapper Scrapit


<AuthorizeView>
    <Authorized>
        <div class="text-right">
            <p>Sort By: &nbsp;</p>
            <select name="" id="" value="@SortBy" @onchange="SortList">
                <option value="CompanyName">Company Name</option>
                <option value="StockCode">Stock Code</option>
                <option value="MarketPrice">Market Price</option>
                <option value="MarketCap">Market Capitalisation</option>
            </select>
        </div>
        <div class="text-right">
            <p>Order: &nbsp;</p>
            <select name="" id="" value="@Order" @onchange="OrderList">
                <option value="Ascending">Ascending</option>
                <option value="Descending">Descending</option>
            </select>
        </div>
        <div class="text-center bg-blue-100">
            <input class="border-4 w-1/3 rounded m-6 p-6 h-8
                       border-blue-300" @bind-value="SearchText"
                   @oninput="OnInput" placeholder="Search" />
        </div>

        <br />

        @if (FilteredStocks == null)
        {
            @foreach (var item in Stocks)
            {
                <div class="companyFrame" type="button" @onclick="@(e=>clickedOnCompany(item.StockCode))">
                    <img src="@GetImageSource(item.StockCode)" width="175" height="125" />
                        <div class="comanyInformation">
                            <h4>@item.CompanyName</h4>
                            <h5 class="darkGray">@item.StockCode</h5>
                            <p> </p>
                            <p>Market Price: $@item.MarketPrice.ToString("0.000")</p>
                            <p>Market Capitalisation: $@item.MarketCap.ToString("#,##0")</p>
                        </div>
                </div>
            }
        }
        else
        {
            @foreach (var item in FilteredStocks)
            {
                <div class="companyFrame" type="button" @onclick="@(e=>clickedOnCompany(item.StockCode))">
                    <img src="@GetImageSource(item.StockCode)" width="175" height="125" />
                    <div class="comanyInformation">
                        <h4>@item.CompanyName</h4>
                        <h5 class="darkGray">@item.StockCode</h5>
                        <p> </p>
                        <p>Market Price: $@item.MarketPrice.ToString("0.000")</p>
                        <p>Market Capitalisation: $@item.MarketCap.ToString("#,##0")</p>
                    </div>
                </div>
            }
        }

    </Authorized>
    <NotAuthorized>
        <p role="status">You are not authorised to see this component</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    public List<Stock> Stocks;
    public List<Stock> FilteredStocks;

    private string SortBy = "CompanyName";
    private string Order = "Ascending";

    protected override void OnInitialized()
    {
        Stocks = DataAccessService.GetStocks(SortBy, Order);
    }

    public async Task clickedOnCompany(string company)
    {
        DataAccessService.SetChosenStock(company);
        await Scrapit.DoScrapping();
        NavManager.NavigateTo("/company/" + company);
    }

    public string SearchText { get; set; }

    public void OnInput(ChangeEventArgs e)
    {
        SearchText = e.Value.ToString();
        FilteredStocks = DataAccessService.GetFilteredStocks(SearchText);
    }

    public string GetImageSource(string StockCode)
    {
        return "CompanyLabels/"+StockCode+".png";
    }

    public void SortList(ChangeEventArgs e)
    {
        SortBy = e.Value.ToString();
        Stocks = DataAccessService.GetStocks(SortBy, Order);
        StateHasChanged();
    }

    public void OrderList(ChangeEventArgs e)
    {
        Order = e.Value.ToString();
        Stocks = DataAccessService.GetStocks(SortBy, Order);
        StateHasChanged();
    }


}
