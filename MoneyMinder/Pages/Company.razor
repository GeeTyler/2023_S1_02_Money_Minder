@layout MainLayout
@page "/company/{Text}"
@using Microsoft.EntityFrameworkCore
@using MoneyMinder.Model
@using MoneyMinder.Data
@inject IDataAccessService DataAccessService
@using Radzen.Blazor
@using System
@using System.Globalization

<AuthorizeView>
    <Authorized>
        <style>
            .chart-container {
                height: 500px;
                width: 1200px;
                margin-left: -50px;
            }

            table {
                position: absolute;
                border: solid;
                background-color: #E9E9E9;
                top: 0%;
                left: 25%;
            }

            tr {
                border: solid;
            }

            .chosenCompanyFrame {
                display: flex;
            }

            .viewButton{
                margin: 0;
                margin-top: 20px;
                margin-left: 40px;
                padding: 4px;
                width: 120px;
                height: 60px;
                border: 1px solid black;
                background-color: transparent;
                border-radius: 4px;
            }
        </style>

        <div class="chosenCompanyFrame">
            <div class="companyInfo">
                <h1>@Text</h1>
                <h2>Current Market Price: $@String.Format("{0:N4}",CurrentPrice)</h2>
            </div>
            <div class="btns_in_company_container">
                @if(isGraph == true)
                {
                    <button class="viewButton" @onclick="viewChangeClicked">View by Table</button>
                }
                else
                {
                    <button class="viewButton" @onclick="viewChangeClicked">View by Graph</button>
                }
            </div>
        </div>
        <br />

        @if (isGraph == true)
        {
            @if (MarketPrices != null && MarketPrices.Any())
            {
                <div class="container">
                    <div class="row">
                        <div class="col-10">
                            <RadzenChart class="chart-container">
                                <RadzenAreaSeries Stroke="rgb(100,255,55)" StrokeWidth="2" Fill="rgba(100,255,55, .5)" Data="MarketPrices" CategoryProperty="Date" ValueProperty="Close">
                                    <ChildContent>
                                        <RadzenMarkers MarkerType="MarkerType.Circle" Fill="#fff" Stroke="rgba(100,255,55)" StrokeWidth="2" Size="2" />
                                    </ChildContent>
                                </RadzenAreaSeries>
                                <RadzenCategoryAxis>
                                    <RadzenAxisTitle Text="Date" />
                                    <RadzenGridLines Visible="true" Stroke="#ccc" LineType="LineType.Dashed" />
                                </RadzenCategoryAxis>
                                <RadzenValueAxis FormatString="{0:C3}">
                                    <RadzenAxisTitle Text="Price" />
                                    <RadzenGridLines Visible="true" />
                                </RadzenValueAxis>
                                <RadzenChartTooltipOptions Style="border: 1px solid rgb(100,255,55); background: #eee; color: #000;" />
                                <RadzenLegend Visible="false" />
                            </RadzenChart>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="priceHistory">
                <table style="width:50%">
                    <tr>
                        <th>Date</th>
                        <th>Open</th>
                        <th>High</th>
                        <th>Low</th>
                        <th>Close</th>
                        <th>AdjClose</th>
                        <th>Volume</th>
                    </tr>
                    @foreach (var item in MarketPriceReverse)
                    {
                        <tr>
                            <td>@item.Date.ToShortDateString()</td>
                            <td>@String.Format("{0:N4}",item.Open)</td>
                            <td>@String.Format("{0:N4}",item.High)</td>
                            <td>@String.Format("{0:N4}",item.Low)</td>
                            <td>@String.Format("{0:N4}",item.Close)</td>
                            <td>@String.Format("{0:N4}",item.AdjClose)</td>
                            <td>@item.Volume</td>
                        </tr>
                    }
                </table>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p role="status">You are not authorised to see this component</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public string Text{ get; set; }

    public double CurrentPrice;
    public bool isGraph = true;
    public bool isTable = false;

    public List<MarketPriceData> MarketPrices = new List<MarketPriceData>();
    public List<MarketPriceData> MarketPriceReverse = new List<MarketPriceData>();


    private void viewChangeClicked()
    {
        isGraph = !isGraph;
        isTable = !isTable;
    }

    protected override void OnInitialized()
    {
        MarketPriceReverse = DataAccessService.GetMarketPrices();
        MarketPriceReverse.Reverse();
        MarketPrices = DataAccessService.GetMarketPrices();
        CurrentPrice = MarketPriceReverse[0].Close;
    }

    IEnumerable<ColorScheme> colorSchemes = Enum.GetValues(typeof(ColorScheme)).Cast<ColorScheme>();
    ColorScheme colorScheme = ColorScheme.Palette;
   
}
