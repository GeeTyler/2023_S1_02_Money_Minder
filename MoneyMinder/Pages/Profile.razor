@layout MainLayout
@page "/Home"
@using Microsoft.AspNetCore.Identity;
@using MoneyMinder.Data
@using MoneyMinder.Model;
@inject CompaniesScrapper Scrapit
@inject IDataAccessService DataAccessService
@inject UserManager<IdentityUser> _userManager
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized>
        <h1 class="profile_title">My Profile</h1>
        <div class="profile_container">
            <div class="profile_info_container">
                <h3 class="profile_title">My Info</h3>
                @if (isFirstNameClicked)
                {
                    <div class="profile_content_container">
                        <p class="heading_spacing">First Name: </p>
                        <div class="change_input_container">
                            <input type="text" class="change_input" placeholder="Enter new first name" @bind="Current.FirstName">
                            <button class="change_input_check" @onclick="changeFirstNameClicked">✓</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="profile_content_container">
                        <p class="heading_spacing">First Name: </p>
                        @if (Current != null)
                        {
                            <p class="content_spacing">@Current.FirstName</p>
                        }
                        else
                        {
                            <p class="content_spacing">Loading...</p>
                        }
                        <button class="btn_in_profile" @onclick="changeFirstNameClicked">Change</button>
                    </div>
                }
                @if (isLastNameClicked)
                {
                    <div class="profile_content_container">
                        <p class="heading_spacing">Last Name: </p>
                        <div class="change_input_container">
                            <input type="text" class="change_input" placeholder="Enter new last name" @bind="Current.LastName">
                            <button class="change_input_check" @onclick="changeLastNameClicked">✓</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="profile_content_container">
                        <p class="heading_spacing">Last Name: </p>
                        @if (Current != null)
                        {
                            <p class="content_spacing">@Current.LastName</p>
                        }
                        else
                        {
                            <p class="content_spacing">Loading...</p>
                        }
                        <button class="btn_in_profile" @onclick="changeLastNameClicked">Change</button>
                    </div>
                }

                <div class="profile_content_container">
                    <p class="heading_spacing">Email: </p>
                    @if (Current != null)
                    {
                        <p class="content_spacing">@Current.Email</p>
                    }
                    else
                    {
                        <p class="content_spacing">Loading...</p>
                    }
                </div>

                @*
                @if (isEmailClicked)
                {
                    <div class="profile_content_container">
                        <p class="heading_spacing">Email: </p>
                        <div class="change_input_container">
                            <input type="text" class="change_input" placeholder="Enter new Email" @bind="Current.Email">
                            <button class="change_input_check" @onclick="changeEmailClicked">✓</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="profile_content_container">
                        <p class="heading_spacing">Email: </p>
                        @if (Current != null)
                        {
                            <p class="content_spacing">@Current.Email</p>
                        }
                        else
                        {
                            <p class="content_spacing">Loading...</p>
                        }
                        <button class="btn_in_profile" @onclick="changeEmailClicked">Change</button>
                    </div>
                }
                *@

                
                @if (isPasswordClicked)
                {
                    <div class="profile_content_container">
                        <p class="heading_spacing">Password: </p>
                        <div class="change_input_container">
                            <input type="password" class="change_input" placeholder="Enter new password" @bind="NewPassword">
                            <button class="change_input_check" @onclick="changePasswordClicked">✓</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="profile_content_container">
                        <p class="heading_spacing">Password: </p>
                        @if (Current != null)
                        {
                            <p class="content_spacing">**Password is Hidden**</p>
                        }
                        else
                        {
                            <p class="content_spacing">Loading...</p>
                        }
                        <button class="btn_in_profile" @onclick="changePasswordClicked">Change</button>
                    </div>
                }

                <br />
                @if (!isDeleteProfileClicked)
                {
                    <div class="delete_account_container">
                        <button class="delete_account_btn" @onclick="deleteProfileClicked">Delete Profile</button>
                    </div>
                }
                else
                {
                    <h5>Are you sure you want to delete your profile?</h5>
                    <div class="delete_account_container">
                        <NavLink class="nav-link" href="Delete" style="padding: 0;" Match="NavLinkMatch.All">
                                <button class="delete_account_btn">Yes Delete</button>
                        </NavLink>
                    </div>
                    <div class="delete_account_container">
                        <button class="btn_in_profile" @onclick="deleteProfileClicked">No</button>
                    </div>
                }
            </div>
            <div class="profile_bank_account_container">
                <h3 class="profile_title">Bank Accounts</h3>
                @if (!viewBankAccounts)
                {
                    <div class="register_account_btn_container">
                        <p class="register_btn_spacing"></p>
                        <button class="btn_in_profile" @onclick="viewAccountsClicked">View Bank Accounts</button>
                    </div>
                }

                @if (viewBankAccounts)
                {
                    if (MyBankAccounts == null || MyBankAccounts.Count == 0)
                    {
                        if (isRegisterClicked)
                        {
                            <div class="register_account_btn_container">
                                <p class="register_btn_spacing">Please input new account name. <br>Your account number will be automatically generated</p>
                                <div class="change_input_container">
                                    <input type="text" class="change_input" placeholder="Account Name" @bind="NewBankAccountName">
                                    <button class="change_input_check" @onclick="registerClicked">✓</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="register_account_btn_container">
                                <p class="register_btn_spacing">You need to register a bank account!</p>
                                <button class="btn_in_profile" @onclick="registerClicked">Register</button>
                            </div>
                        }
                    }
                    if (MyBankAccounts.Count > 0)
                    {
                        if (isChangeAccountNameClicked)
                        {
                            <div class="register_account_btn_container">
                                <p class="register_btn_spacing">Change Account Name:</p>
                                <div class="change_input_container">
                                    <input type="text" class="change_input" placeholder="Account Name" @bind="NewBankAccountName">
                                    <button class="change_input_check" @onclick="(args) => editAccountNameClicked(editAccountNum)">✓</button>
                                </div>
                            </div>
                        }
                        else if (isDeleteAccountClicked)
                        {
                            <h5>Are you sure you want to delete this account?</h5>
                            <div class="delete_account_container">
                                <button class="btn_in_profile delete_btn" @onclick="(args) => deleteAccountClicked(deleteAccountNum)">Yes Delete</button>
                            </div>
                            <div class="delete_account_container">
                                <button class="btn_in_profile" @onclick="dontDeleteAccount">No</button>
                            </div>
                        }
                        else
                        {
                            foreach (var item in MyBankAccounts)
                            {
                                <div class="profile_content_container">
                                    <div class="account_content_container">
                                        <div class="account_number_container">
                                            <p class="content_spacing">@item.Name</p>
                                            <p class="content_spacing">@ConvertAccountNumToString(item.AccountNum)</p>
                                            <br />
                                            <p class="content_spacing">$@String.Format("{0:N2}",item.Balance)</p>
                                            <p class="content_spacing">Blocked status: @item.Blocked</p>
                                            <button class="btn_in_profile delete_btn" @onclick="(args) => deleteAccountClicked(item.AccountNum)">Delete Account</button>
                                            <button class="btn_in_profile" @onclick="(args) => editAccountNameClicked(item.AccountNum)">Change Name</button>
                                        </div>
                                    </div>
                                </div>
                                if (isDeleteAccountClicked)
                                {
                                    <h5>Are you sure you want to delete this account?</h5>
                                    <div class="delete_account_container">
                                        <button class="btn_in_profile delete_btn" @onclick="(args) => deleteAccountClicked(deleteAccountNum)">Yes Delete</button>
                                    </div>
                                    <div class="delete_account_container">
                                        <button class="btn_in_profile" @onclick="dontDeleteAccount">No</button>
                                    </div>
                                }
                            }
                            @if (isRegisterClicked)
                            {
                                <div class="register_account_btn_container">
                                    <p class="register_btn_spacing">Please input new account name.</p>
                                    <div class="change_input_container">
                                        <input type="text" class="change_input" placeholder="Account Name" @bind="NewBankAccountName">
                                        <button class="change_input_check" @onclick="registerClicked">✓</button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <br />
                                <div class="register_account_btn">
                                    <p class="register_btn_spacing"></p>
                                    <button class="btn_in_profile" @onclick="registerClicked">Add New Account</button>
                                </div>
                            }
                        }
                    }
                }

            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p role="status">You are not authorised to see this component</p>
    </NotAuthorized>
</AuthorizeView>

@code 
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private User Current;
    public List<BankAccount> MyBankAccounts;

    private string NewBankAccountName = "";
    private int editAccountNum;
    private int deleteAccountNum;
    private string NewPassword = "";
    private bool isFirstNameClicked = false;
    private bool isLastNameClicked = false;
    //private bool isEmailClicked = false;
    private bool isPasswordClicked = false;
    private bool isRegisterClicked = false;
    private bool isDeleteProfileClicked = false;
    private bool viewBankAccounts = false;
    private bool isDeleteAccountClicked = false;
    private bool isChangeAccountNameClicked = false;

    async Task<string> getUsersEmail()
    {
        var user = (await authenticationStateTask).User;
        return user.Identity.Name;
    }

    protected override async Task OnInitializedAsync()
    {
        await Scrapit.DoScrapping();
        Current = DataAccessService.GetUser(await getUsersEmail());
        MyBankAccounts = DataAccessService.GetBankAccounts(Current.Email);
        StateHasChanged();
    }

    private void changeFirstNameClicked()
    {
        if (isFirstNameClicked == true)
        {
            DataAccessService.ChangeFirstName(Current.FirstName, Current.Email);
            isFirstNameClicked = false;
            StateHasChanged();
        }
        else
        {
            isFirstNameClicked = true;
        }
    }

    private void changeLastNameClicked()
    {
        if (isLastNameClicked == true)
        {
            DataAccessService.ChangeLastName(Current.LastName, Current.Email);
            isLastNameClicked = false;
            StateHasChanged();
        }
        else
        {
            isLastNameClicked = true;
        }
    }

    @*
    private void changeEmailClicked()
    {
        if (isEmailClicked == true)
        {
            DataAccessService.changeEmail(Current., Current.);
            isEmailClicked = false;
            StateHasChanged();
        }
        else
        {
            isEmailClicked = true;
        }
    }
    *@

    private async Task changePasswordClicked()
    {
        if (isPasswordClicked && NewPassword != "")
        {
            var user = await _userManager.GetUserAsync((System.Security.Claims.ClaimsPrincipal)SignInManager.Context.User);
            var token = await _userManager.GeneratePasswordResetTokenAsync(user);
            await _userManager.ResetPasswordAsync(user, token, NewPassword);
            isPasswordClicked = false;
        }
        else
        {
            isPasswordClicked = true;
        }
    }

    private void viewAccountsClicked()
    {
        viewBankAccounts = !viewBankAccounts;
    }

    private void registerClicked()
    {
        if (isRegisterClicked == true)
        {
            DataAccessService.AddBankAccount(Current.Email, NewBankAccountName);
            isRegisterClicked = false;
            MyBankAccounts = DataAccessService.GetBankAccounts(Current.Email);
            StateHasChanged();
        }
        else
        {
            NewBankAccountName = "";
            isRegisterClicked = true;
        }
    }

    public string ConvertAccountNumToString(int AccountNum)
    {
        return string.Format("{0:###-###-###}", AccountNum);
    }

    private void deleteProfileClicked()
    {
        isDeleteProfileClicked = !isDeleteProfileClicked;
    }

    public void editAccountNameClicked(int accountNum)
    {
        editAccountNum = accountNum;
        if (isChangeAccountNameClicked == true)
        {
            DataAccessService.ChangeBankAccountName(accountNum, NewBankAccountName);
            isChangeAccountNameClicked = false;
            MyBankAccounts = DataAccessService.GetBankAccounts(Current.Email);
            StateHasChanged();
        }
        else
        {
            NewBankAccountName = "";
            isChangeAccountNameClicked = true;
        }
    }

    private void deleteAccountClicked(int accountNum)
    {
        deleteAccountNum = accountNum;
        if (isDeleteAccountClicked == true)
        {
            DataAccessService.DeleteBankAccount(accountNum);
            isDeleteAccountClicked = false;
            MyBankAccounts = DataAccessService.GetBankAccounts(Current.Email);
            StateHasChanged();
        }
        else
        {
            isDeleteAccountClicked = true;
        }
    }

    private void dontDeleteAccount()
    {
        isDeleteAccountClicked = false;
    }
}
