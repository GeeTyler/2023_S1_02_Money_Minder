@layout MainLayout
@page "/transfer/{text}"
@using MoneyMinder.Model
@using MoneyMinder.Data
@using MoneyMinder.Pages
@using Microsoft.AspNetCore.Identity;
@inject IDataAccessService DataAccessService
@inject NavigationManager NavManager
@inject UserManager<IdentityUser> _userManager
@inject SignInManager<IdentityUser> SignInManager

<AuthorizeView>
    <Authorized>
        <div class="transfer_container">
            <!-- transfer account box -->
            <div class="transfer_account_container">
                <!-- both of the selects display account that are availbale to transfer -->
                <!-- it should block transfer to the blocked account -->
                <!-- if an account has been selected 'from' from selection, then that account should not be turn up at 'to' selection -->
                <div class="transfer_account_from">
                    <p>From: &nbsp;</p>
                    <select name="" id="" class="select account_selection" value="@from" @onchange="OnFromChanged">
                        <option value="" disabled selected hidden>-- Select an account --</option>
                        @foreach (var item in MyBankAccounts)
                        {
                            <option value="@Convert.ToString(item.AccountNum)">@item.Name</option>
                        }
                    </select>
                </div>
                <div class="transfer_account_to">
                    <p>To: &nbsp;</p>
                    <select name="" id="" class="select account_selection" value="@to" @onchange="OnToChanged">
                        <option value="" disabled selected hidden>-- Select an account --</option>
                        @foreach (var item in MyBankAccounts)
                        {
                            <option value="@Convert.ToString(item.AccountNum)">@item.Name</option>
                        }
                    </select>
                </div>
            </div>

            <!-- transfer amount input box -->
            <div class="transfer_amount_container">
                <p class="amount_reference_spacing">Amount: &nbsp;&nbsp;&nbsp;</p>
                <input type="number" class="transfer_amount_input" placeholder="Enter the amount" onfocus="this.placeholder = ''" onblur="this.placeholder = 'Enter the amount'" @bind-value="@amount" @oninput="OnAmountChanged">
                @if (amount < 0)
                {
                    <p class="text-danger">  Amount must be a positive value.</p>
                }
                @if (fromAccount.Balance - amount < 0)
                {
                    <p class="text-danger">  Insufficient balance in @fromAccount.Name</p>
                }
            </div>

            <!-- transfer button -->
            <button class="transfer_button" @onclick="MakeTransfer" disabled="@disabled">Transfer</button>
            @if (cantTransferTo)
            {
                <br />
                <p class="text-danger">Please select 'From' and 'To' accounts.</p>
            }
            @if (from == to)
            {
                <br />
                <p class="text-danger">'From' and 'To' accounts cannot be the same.</p>
            }
            @if (fromAccount.Blocked == true)
            {
                <br />
                <p class="text-danger">@fromAccount.Name is blocked!</p>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <p role="status">You are not authorized to see this component.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    //Defines a parameter named "Text" of type string
    [Parameter]
    public string Text { get; set; }

    //Declares a cascading parameter named "authenticationStateTask" of type Task<AuthenticationState>
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    //Declares private variables
    private User Current; //Represents the current user
    private List<BankAccount> MyBankAccounts; //Represents the list of bank accounts associated with the current user

    //Retrieves the email of the user asynchronously
    async Task<string> getUsersEmail()
    {
        var user = (await authenticationStateTask).User;
        return user.Identity.Name;
    }

    //Executed when the component is initialized asynchronously
    protected override async Task OnInitializedAsync()
    {
        //Retrieves the current user based on the email
        Current = DataAccessService.GetUser(await getUsersEmail());

        //Retrieves the bank accounts associated with the current user
        MyBankAccounts = DataAccessService.GetBankAccounts(Current.Email);

        //Notifies the component that its state has changed
        StateHasChanged();
    }

    //Declares additional private variables
    private BankAccount fromAccount = new BankAccount(); //Represents the selected "from" bank account
    private BankAccount toAccount = new BankAccount(); //Represents the selected "to" bank account
    private string from; //Represents the selected "from" account number as a string
    private string to; //Represents the selected "to" account number as a string
    private bool disabled = true; //Indicates whether the transfer button is disabled or not
    private bool cantTransferTo = true; //Indicates whether it is possible to transfer to the selected account or not
    public double amount { get; set; } //Represents the transfer amount

    //Checks if both the "from" and "to" accounts are selected
    private void CheckAccounts()
    {
        if (from != null && to != null)
        {
            cantTransferTo = false;
        }
        else
        {
            cantTransferTo = true;
        }
    }

    //Updates the selected "from" account when changed
    private void OnFromChanged(ChangeEventArgs e)
    {
        from = e.Value.ToString();
        fromAccount = DataAccessService.GetBankAccount(Convert.ToInt32(from));
        CheckAccounts();
        StateHasChanged();
    }

    //Updates the selected "to" account when changed
    private void OnToChanged(ChangeEventArgs e)
    {
        to = e.Value.ToString();
        toAccount = DataAccessService.GetBankAccount(Convert.ToInt32(to));
        CheckAccounts();
        StateHasChanged();
    }

    //Updates the transfer amount when changed and checks if transfer is possible
    private void OnAmountChanged(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value.ToString(), out double parsedAmount))
        {
            amount = parsedAmount;
            CheckTransfer();
        }
        else
        {
            
        }
    }

    //Checks if the transfer is possible based on account balances and conditions
    private void CheckTransfer()
    {
        if (fromAccount.Balance - amount < 0 || fromAccount.Blocked == true || amount < 0 || fromAccount == toAccount)
        {
            disabled = true;
        }
        else
        {
            disabled = false;
        }
    }

    //Makes the transfer between accounts
    public void MakeTransfer()
    {
        //Adds the transfer transaction using the data access service
        DataAccessService.AddTransfer(fromAccount.AccountNum, toAccount.AccountNum, amount);

        //Notifies the component that its state has changed
        StateHasChanged();

        //Navigates to the bank accounts page for the "from" account
        NavManager.NavigateTo("/bankaccounts/" + fromAccount.AccountNum);
    }
}
