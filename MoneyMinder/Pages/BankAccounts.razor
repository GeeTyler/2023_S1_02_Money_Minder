@layout MainLayout
@page "/bankaccounts"
@using MoneyMinder.Model
@using MoneyMinder.Data
@using MoneyMinder.Pages
@using Microsoft.AspNetCore.Identity
@inject IDataAccessService DataAccessService
@inject NavigationManager NavManager
@inject UserManager<IdentityUser> _userManager
@inject SignInManager<IdentityUser> SignInManager

<AuthorizeView>
    <Authorized>
        @if (MyBankAccounts != null)
        {
            <h1 class="text-center">My Accounts</h1>
            foreach (var item in MyBankAccounts)
            {
                <div class="bank_account_frame" type="button" @onclick="@(e=>clickedOnAccount(item.AccountNum))">
                    <div class="bank_account_label">
                        <div class="bank_account_content">
                            <h2>@item.Name </h2>
                            <h3>@ConvertAccountNumToString(item.AccountNum)</h3>
                            <h4>$@String.Format("{0:N2}",item.Balance)</h4>
                        </div>
                    </div>
                </div>
            }
        }
        @if (MyBankAccounts == null || MyBankAccounts.Count == 0)
        {
            <br />

            <br />

            <br />

            <br />
            <h2 class="text-center">You have no Bank Accounts registered.</h2>
            <br />
            <div class="text-center">
                <p class="text-center">Click here to go register an account</p>
                <br />
                <NavLink class="nav-link" href="home" Match="NavLinkMatch.All">
                    <button class="btn_in_profile">Register</button>
                </NavLink>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p role="status">You are not authorized to see this component</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } //Gets the authentication state
    private User Current; //Stores the current user
    private List<BankAccount> MyBankAccounts; //Stores the bank accounts

    async Task<string> getUsersEmail()
    {
        var user = (await authenticationStateTask).User; //Retrieves the user from the authentication state
        return user.Identity.Name; //Returns the user's email address
    }

    protected override async Task OnInitializedAsync()
    {
        Current = DataAccessService.GetUser(await getUsersEmail()); //Retrieves the current user
        MyBankAccounts = DataAccessService.GetBankAccounts(Current.Email); //Retrieves the bank accounts for the current user
        StateHasChanged(); //Notifies the component that its state has changed
    }

    public void clickedOnAccount(int account)
    {
        NavManager.NavigateTo("/bankaccounts/" + account); //Navigates to the account details page for the selected account
    }

    public string ConvertAccountNumToString(int AccountNum)
    {
        return string.Format("{0:###-###-###}", AccountNum); //Converts the account number to a formatted string
    }
}
