@layout MainLayout
@page "/bankaccounts/{Text}"
@using MoneyMinder.Model
@using MoneyMinder.Data
@using MoneyMinder.Pages
@using Microsoft.AspNetCore.Identity;
@inject IDataAccessService DataAccessService
@inject NavigationManager NavManager
@inject UserManager<IdentityUser> _userManager
@inject SignInManager<IdentityUser> SignInManager


<AuthorizeView>
    <Authorized>
        <div class="account_detail_container">
            <div class="account_info_container">
                <div class="account_number_container">
                    <p class="account_number">Account Number: @ConvertAccountNumToString(CurrentBankAccount.AccountNum)</p>

                    <label class="transaction_label" for="">
                        @if (CurrentBankAccount.Blocked == true)
                        {
                            <p style="color: #D20202;">Transaction blocked</p>
                        }
                        else
                        {
                            <p style="color: #02D20A;">Block further transaction</p>
                        }
                        <input class="transaction" type="checkbox" @onclick="(e=>changedChecked())">
                    </label>
                </div>
                <div class="container_with_transfer_btn">
                    <div class="account_holder_name_container">
                        <p class="account_holder">Account Holder: @Current.FirstName @Current.LastName</p>
                        <div class="account_name">
                            <p>Account Name: @CurrentBankAccount.Name</p>
                        </div>
                    </div>
                    <div class="account_transfer_btn_container">
                        <button class="account_transfer_btn" @onclick="@(e=>clickedOnTransfer(CurrentBankAccount.Name))">Make Transfer</button>
                    </div>
                    <br />
                    <div class="account_transfer_btn_container">
                        <button class="account_transfer_btn" @onclick="@GenerateTransaction">Random Transactions</button>
                    </div>
                </div>
            </div>

            <div class="percentage_of_spending_container">
                <table class="percentage_of_spending_table">
                    <thead>
                        <tr>
                            <th>Necessary</th>
                            <th>Discretionary</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            @if (NecessaryAmount != 0 && TotalAmount != 0)
                            {
                                <td>@String.Format("{0:N2}", PercentageOfTotal(TotalAmount, NecessaryAmount))%</td>
                            }
                            else
                            {
                                <td class="content_spacing">Loading...</td>
                            }
                            @if (DiscretionaryAmount != 0 && TotalAmount != 0)
                            {
                                <td>@String.Format("{0:N2}", PercentageOfTotal(TotalAmount, DiscretionaryAmount))%</td>
                            }
                            else
                            {
                                <td class="content_spacing">Loading...</td>
                            }
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="list_tab_container">
            <div class="list_tab">
                <div class="tab_btn tab_all" @onclick="AllClicked">All</div>
                <div class="tab_btn tab_transfer" @onclick="TransferClicked">Transfer</div>
                <div class="tab_btn tab_necessary" @onclick="NecessaryClicked">Necessary</div>
                <div class="tab_btn tab_discretionary" @onclick="DiscretionaryClicked">Discretionary</div>
            </div>
            <p class="account_current_bal">$@String.Format("{0:N2}",CurrentBankAccount.Balance)</p>
        </div>

        <div class="account_content">
            <table class="account_content_table">
                <thead class="account_content_table_header">
                    <tr>
                        <th class="table_date" @onclick="@(e => OrderTransactions("Date"))">Date</th>
                        <th class="table_transaction_num" @onclick="@(e => OrderTransactions("TransactionNum"))">Transaction Number</th>
                        <th class="table_transaction_type" @onclick="@(e => OrderTransactions("TransactionType"))">Transaction Type</th>
                        <th class="table_transaction_amount" @onclick="@(e => OrderTransactions("TransactionAmount"))">Amount</th>
                        <th class="table_percentage" @onclick="@(e => OrderTransactions("TransactionAmount"))">Percentage</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!isDiscretionary && !isNecessary && !isTransfer)
                    {
                        if (AccountsTransactions.Count > 0)
                        {
                            foreach (var item in AccountsTransactions)
                            {
                                <tr>
                                    <td>@item.DateandTime.ToShortDateString()</td>
                                    <td>@item.TrasactionNum</td>
                                    <td>@item.TransactionType</td>
                                    <td>$ @String.Format("{0:N2}",item.TransactionAmount)</td>
                                    @if (item.TransactionType != "Transfer" && item.TransactionType != "Receive Transfer")
                                    {
                                        <td>@String.Format("{0:N2}", PercentageOfTotal(TotalAmount,item.TransactionAmount))%</td>
                                    }
                                    else
                                    {
                                        <td>-</td>
                                    }
                                </tr>
                            }
                        }
                    }
                    @if (isDiscretionary && !isNecessary && !isTransfer)
                    {
                        foreach (var item in AccountsTransactions.Where(e => e.TransactionType.Equals("Shopping")
                        || e.TransactionType.Equals("Eating Out") || e.TransactionType.Equals("Entertainment")))
                        {
                            <tr>
                                <td>@item.DateandTime.ToShortDateString()</td>
                                <td>@item.TrasactionNum</td>
                                <td>@item.TransactionType</td>
                                <td>$ @String.Format("{0:N2}",item.TransactionAmount)</td>
                                <td>@String.Format("{0:N2}", PercentageOfTotal(DiscretionaryAmount,item.TransactionAmount))%</td>
                            </tr>
                        }
                    }
                    @if (!isDiscretionary && isNecessary)
                    {
                        foreach (var item in AccountsTransactions.Where(e => e.TransactionType.Equals("Bills")
                        || e.TransactionType.Equals("Supermarket")))
                        {
                            <tr>
                                <td>@item.DateandTime.ToShortDateString()</td>
                                <td>@item.TrasactionNum</td>
                                <td>@item.TransactionType</td>
                                <td>$ @String.Format("{0:N2}",item.TransactionAmount)</td>
                                <td>@String.Format("{0:N2}", PercentageOfTotal(NecessaryAmount,item.TransactionAmount))%</td>
                            </tr>
                        }
                    }
                    @if (isTransfer && !isDiscretionary && !isNecessary)
                    {
                        foreach (var item in AccountsTransactions.Where(e => e.TransactionType.Equals("Transfer")
                        || e.TransactionType.Equals("Receive Transfer")))
                        {
                            <tr>
                                <td>@item.DateandTime.ToShortDateString()</td>
                                <td>@item.TrasactionNum</td>
                                <td>@item.TransactionType</td>
                                <td>$ @String.Format("{0:N2}",item.TransactionAmount)</td>
                                <td>-</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </Authorized>
    <NotAuthorized>
        <p role="status">You are not authorised to see this component</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string Text { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private User Current;
    private BankAccount CurrentBankAccount;
    private List<Transactions> AccountsTransactions;

    private string Date = "Date";
    private string TransactionNumber = "TransactionNum";
    private string TransactType = "TransactionType";
    private string TransactAmount = "TransactionAmount";
    private bool isChecked = false;
    private bool isClicked = false;
    private bool isTransfer = false;
    private bool isNecessary = false;
    private bool isDiscretionary = false;
    private bool Descending = false;
    private double TotalAmount = 0.0;
    private double NecessaryAmount = 0.0;
    private double DiscretionaryAmount = 0.0;

    async Task<string> getUsersEmail()
    {
        var user = (await authenticationStateTask).User;
        return user.Identity.Name;
    }

    protected override async Task OnInitializedAsync()
    {
        Current = DataAccessService.GetUser(await getUsersEmail());
        CurrentBankAccount = DataAccessService.GetBankAccount(Convert.ToInt32(Text));
        AccountsTransactions = DataAccessService.GetTransactions(CurrentBankAccount.AccountNum)
        .OrderByDescending(t => t.DateandTime).ToList();
        SetAmounts();
        StateHasChanged();
    }

    public void clickedOnTransfer(string account)
    {
        NavManager.NavigateTo("/transfer/" + account);
    }

    private void changedChecked()
    {
        isChecked = !isChecked;
        DataAccessService.BlockBankAccount(CurrentBankAccount.AccountNum, isChecked);
        CurrentBankAccount = DataAccessService.GetBankAccount(Convert.ToInt32(Text));
        StateHasChanged();
    }

    public void GenerateTransaction()
    {
        DataAccessService.GenerateRandomTransactions(CurrentBankAccount.AccountNum);
        AccountsTransactions = DataAccessService.GetTransactions(CurrentBankAccount.AccountNum).ToList();
        SetAmounts();
        StateHasChanged();
    }

    private void TransferClicked()
    {
        isNecessary = false;
        isDiscretionary = false;
        isTransfer = !isTransfer;
    }

    private void NecessaryClicked()
    {
        isTransfer = false;
        isDiscretionary = false;
        isNecessary = !isNecessary;
    }

    private void DiscretionaryClicked()
    {
        isTransfer = false;
        isNecessary = false;
        isDiscretionary = !isDiscretionary;
    }

    private void AllClicked()
    {
        isTransfer = false;
        isNecessary = false;
        isDiscretionary = false;
    }

    public string ConvertAccountNumToString(int AccountNum)
    {
        return string.Format("{0:###-###-###}", AccountNum);
    }

    public double PercentageOfTotal(double total, double amount)
    {
        return (amount / total) * 100;
    }

    public void SetAmounts()
    {
        double sum = 0;
        double sum2 = 0;
        double sum3 = 0;

        foreach (var item in AccountsTransactions.Where(e => e.TransactionType.Equals("Shopping")
            || e.TransactionType.Equals("Eating Out") || e.TransactionType.Equals("Entertainment") ||
            e.TransactionType.Equals("Bills") || e.TransactionType.Equals("Supermarket")))
        {
            sum += item.TransactionAmount;
        }

        TotalAmount = sum;

        foreach (var item in AccountsTransactions.Where(e => e.TransactionType.Equals("Shopping")
        || e.TransactionType.Equals("Eating Out") || e.TransactionType.Equals("Entertainment")))
        {
            sum2 += item.TransactionAmount;
        }

        DiscretionaryAmount = sum2;

        foreach (var item in AccountsTransactions.Where(e => e.TransactionType.Equals("Bills")
        || e.TransactionType.Equals("Supermarket")))
        {
            sum3 += item.TransactionAmount;
        }

        NecessaryAmount = sum3;
    }

    public void OrderTransactions(string type)
    {
        List<Transactions> sortedTransactions = DataAccessService.GetTransactions(CurrentBankAccount.AccountNum);

        if (type == "Date")
        {
            sortedTransactions.Sort((t1, t2) => t1.DateandTime.CompareTo(t2.DateandTime));
        }
        else if (type == "TransactionNum")
        {
            sortedTransactions.Sort((t1, t2) => t1.TrasactionNum.CompareTo(t2.TrasactionNum));
        }
        else if (type == "TransactionType")
        {
            sortedTransactions.Sort((t1, t2) => t1.TransactionType.CompareTo(t2.TransactionType));
        }
        else if (type == "TransactionAmount")
        {
            sortedTransactions.Sort((t1, t2) => t2.TransactionAmount.CompareTo(t1.TransactionAmount));
        }

        if (Descending)
        {
            sortedTransactions.Reverse();
        }

        AccountsTransactions = sortedTransactions;
        Descending = !Descending;
        StateHasChanged();
    }
}